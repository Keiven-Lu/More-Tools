Common encoding are base64 or hexadecimal. 
md5sum, sha1sum, sha256sum, and sha512sum produce their outputs in hexadecimal digits 

Why is Hashing Important 
Hashing plays a vital role in our daily use of the internet. Like other cryptographic functions, hashing remains 
hidden from the user. Hashing helps protect data's integrity and ensure password confidentiality


What is a Hash Collision
A hash collision is when two different inputs give the same output. Hash functions are designed to avoid collisions as best as possible. 
Hash functions are designed to prevent an attacker from being able to create a collision intentionally. However, because the number of inputs
is practically unlimited and the number of possible outputs is limited, this leads to a pigeonhole effect

The pigeonhole effect states that the number of item(pigeons) is more than the number of containers(pigeonholes); some containers 
must hold more than one item. In other words, there are a fixed number of different output values for the hash function, but you 
can give it any size inout. As there are more inputs than outputs, some inputs must inevitabky give the same output. If you have 
21 pigeons and 16 pigeonholes, some of the pigeons are going to share the pigeonholes. Consequently, collisions are unavoidable. 


Prefix	Algorithm
$y$	--> yescrypt is a scalable hashing scheme and is the default and recommended choice in new systems
$gy$	--> gost-yescrypt uses the GOST R 34.11-2012 hash function and the yescrypt hashing method
$7$	--> scrypt is a password-based key derivation function
$2b$, $2y$, $2a$, $2x$	--> bcrypt is a hash based on the Blowfish block cipher originally developed for OpenBSD but supported on a recent version of FreeBSD, NetBSD, Solaris 10 and newer, and several Linux distributions
$6$	--> sha512crypt is a hash based on SHA-2 with 512-bit output originally developed for GNU libc and commonly used on (older) Linux systems
$md5	--> SunMD5 is a hash based on the MD5 algorithm originally developed for Solaris
$1$	--> md5crypt is a hash based on the MD5 algorithm originally developed for FreeBSD

hashcat -m <hash_type> -a <attack_mode> hashfile wordlist,
-m <hash_type> specifies the hash-type in numeric format. For example, -m 1000 is for NTLM. Check the official documentation (man hashcat) and example page to find the hash type code to use.
-a <attack_mode> specifies the attack-mode. For example, -a 0 is for straight, i.e., trying one password from the wordlist after the other.
hashfile is the file containing the hash you want to crack.
wordlist is the security word list you want to use in your attack.
  0 --> Straight 
  1 --> Combination 
  3 --> Brute-force
  6 --> Hybrid Wordlist + Mask 
  7 --> Hybrid Mask + Wordlist
  9 --> Association
  

HMAC (Keyed-Hash Message Authentication Code) is a type of message authentication code (MAC) that uses a cryptographic hash function in combination with a secret key to verify the authenticity and integrity of data.















