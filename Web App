Uniform Resource Locator (URL)
Web address that lets you access all kinds of online content-whether its a webpage, a video, a photo, or other media

Scheme 
The protocol used to access the website. The most common are HTTP and HTTPS. 

User 
Some URLs can include a user's login details (usually a username) for sites that require authentication. This is mostly in URLs that need credentials 
to access certain resources. However, it's rare nowadays because putting login details in the URL isn't very safe

Host/Doamin
The host or domain is the most important part of the URL because it tells you which website you're accessing. Every domain name has to be unique and is registered 
through domain registrars. From a secuirty standpoint, look for domain names that appear almost like real ones but have small differences (this is called typosquatting).
These fake domains are often used in phishing attacks to trick people into giving up sensitive info

Port 
The port number helps direct your browser to the right service on the web server. It's like telling the server which doorway to use for communication. Port numbers range from 1
to 65,535, but the most common are 80 for HTTP and 443 for HTTPS

Path 
The path points to the specific file or page on the server that you're trying to access. It's like a roadmap that shows the browser where to go. Websites need to secure these paths
to make sure only authorised users can access sensitive resources

Query String 
Part of the URL that starts with a question mark (?). It's often used for things like search terms or form inputs. Since users can modify these query strings, it's important to handle 
Them securley to preven attacks like injections, where malicious code could be added

Fragment 
Starts with a hash sysmbol (#) and helps point to a specific section of a webpage-like jumping directly to a particular heading or table. Users can modify this too, so like with 
query strings, it's important to check and clean up any data here to avoid issues like injection attacks

Start Line 
The introduction of the message. It tells you what kind of message is being sent-whether it's a request from the user or a response from the server. This line also 
gives important details about how the message should be handled

Headers
Headers are made up of key-value pairs that provide extra information about the HTTP message. They give instructions to both the client and the server handling the request 
or response. These headers cover all sorts of things, like security, content types, and more, making sure everything goes smoothly in the communication

Empty Line 
The Empty line is a little divider that separates the header from the body. It's essential because it shows where the headers stop and where the actual content of the message begins. 
Without this empty line, the message might get messed up, and the client or server could misinterpret it, causing errors. 

Body
The body is where the actual data is stored. In a request, the body might include data the user wants to send to the server (like form data). In a response, it's where the server 
puts the content that the user requested (like a webpage or API data)

Why Understanding HTTP messgaes matter
These messages are the foundation of how web applications communicate. If they're structured properly, everything works smoothly
Knowing how they work will help you diagnose issues in web communication, which means better performance and reliability for your web application
It's also crucual for security. Understanding HTTP message helps you implement strong security measures to protect data during transmission

Request line 
The request line is the first part of an HTTP request and tells the server what kind of request it's dealing with.
It has three main parts: the HTTP method, the URL path, and the HTTP version
Ex: Method /path HTTP/Version
Ex: GET /user/login.html HTTP/1.1

GET 
Used to fetch data from the server without making any changes. 

POST 
Sends data to the server, usually to create or update something

PUT 
Replaces or updates something on the server. 

DELETE
Removes something from the server

PATHC 
Updates part of a resource. 

HEAD 
Works like GET but only retrieves headers, not the full content

OPTIONS 
Tells you what methods are available for a specific resource, helping clients understand what they can do with the server

TRACE
Similar to options, it shows which method are allowed, often for debugging.

CONNECT
Used to connect a secure connection, like for HTTPS.

HTTP Version 
HTTP/0.9 --> First version, only support GET request
HTTP/1.0 --> Added headers and better support for different types of content, improving caching 
HTTP/1.1 --> Brought persistent connections, chunked transfer encoding, and better caching. Widely used today 
HTTP/2 --> Introduced features like multiplexing, header compression, and prioritisation for faster performance
HTTP/3 --> Built on HTTP/2, but uses a new protocol (QUIC) for quicker and more secure connections. 

URL Encoded application/x-www-form-urlencoded
A format where data is structured in pairs of key and value where (key=value). Multiple pairs are separated by an (&) symbol,
such as key1=value1&key2=value2. 

Form Data(multipart/form-data)
Allows multiple data blocks to be sent where each block is separated by a boundary string. The boundary string is the defined header 
of the request itself. This type of formatting can be used to send binary data, such as when uploading files or images to a web server 

JSON(application/json)
In this format, the data can be sent using the JSON (Javascript Object Notation) structure. Data is formatted in pairs of name:value. 

XML (application/xml)
In XML formatting, data is structured inside labels called tags, which have an opening and closing. These labels can be nested within 
each other. 

Informational Responses (100-199)
These codes mean the server has received part of the request and is waiting for the rest. It’s a "keep going" signal.

Successful Responses (200-299)
These codes mean everything worked as expected. The server processed the request and sent back the requested data.

Redirection Messages (300-399)
These codes tell you that the resource you requested has moved to a different location, usually providing the new URL.

Client Error Responses (400-499)
These codes indicate a problem with the request. Maybe the URL is wrong, or you’re missing some required info, like authentication.

Server Error Responses (500-599)
These codes mean the server encountered an error while trying to fulfil the request. These are usually server-side issues and not the client’s fault.

Common Status codes
100 (Continue)
The server got the first part of the request and is ready for the rest.

200 (OK)
The request was successful, and the server is sending back the requested resource.

301 (Moved Permanently)
The resource you’re requesting has been permanently moved to a new URL. Use the new URL from now on.

404 (Not Found)
The server couldn’t find the resource at the given URL. Double-check that you’ve got the right address.

500 (Internal Server Error)
Something went wrong on the server’s end, and it couldn’t process your request.













